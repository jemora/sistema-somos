


print(db_characters[CHAR_ID]['Name'])




#loop in arr
var i = 0
while i < arr.size():
    #Access func
    arr[i].func_name()

    #Acces or change var
    arr[i].var_name = 1

    #Then iterate to avoid infinite loop!!
    i+=1



   #---------verificar un dato duplicado en una lista----------------


   func check_duplicates(a):
    var is_dupe = false

    for i in range(0, IntArray(a).size(), -1):
        if is_dupe == true:
            break
        for j in range(IntArray(a).size()):
            if IntArray(a)[j] == IntArray(a)[i] && i != j:
                is_dupe = true
                spell_cast_success = false
                print("duplicate")
                break


 func find_duplicates_small(a):
    var duplicates = []
    for i in range(0, a.size()):
        for j in range(j+1, a.size()):
            if a[j] == a[i]:
                duplicates.append(j)
    return duplicates









   ----------------

   Container built-in types
Array

Secuencia genérica de tipos de objetos arbitrarios, incluyendo otros arrays o diccionarios (ver abajo).
La matriz puede cambiar el tamaño dinámicamente. Las matrices se indexan a partir del índice 0.
A partir de Godot 2.1, los índices pueden ser negativos como en Python, para contar desde el final.

var arr=[]
arr=[1, 2, 3]
var b = arr[1]            # Esto es 2
var c = arr[arr.size()-1] # Esto es 3
var d = arr[-1]           # Igual que la línea anterior, pero más corta
arr[0] = "Hi!"            # Reemplazando el valor 1 por "Hi"
arr.append(4)             # Matriz es ahora ["Hola", 2, 3, 4]


Las matrices GDScript se asignan linealmente en la memoria para la velocidad.
 Sin embargo, las matrices muy grandes (más de decenas de miles de elementos)
 pueden causar la fragmentación de la memoria. Si esto es una preocupación tipos
 especiales de matrices están disponibles. Estos sólo aceptan un solo tipo de datos.
 Evitan la fragmentación de la memoria y también utilizan menos memoria pero son atómicos
 y tienden para funcionar más lentamente que arrays genéricos. Por lo tanto,
 sólo se recomienda su uso para conjuntos de datos muy grandes:


    ByteArray: Una matriz de bytes (números enteros de 0 a 255).
    IntArray: Una matriz de enteros.
    FloatArray: Una matriz de flotadores.
    StringArray: Una matriz de cadenas.
    Vector2Array: Una matriz de objetos Vector2.
    Vector3Array: Una matriz de Vector3 objetos.
    ColorArray: Una matriz de Color objetos.



-------------------


Dictionary

Contenedor asociativo que contiene valores referenciados por claves únicas.

var d={4:5, "a key":"a value", 28:[1,2,3]}
d["Hi!"] = 0
var d = {
    22         : "Value",
    "somekey"  : 2,
    "otherkey" : [2,3,4],
    "morekey"  : "Hello"
}

También se admite la sintaxis de la tabla de estilo Lua. Lua-estilo utiliza = en lugar de: y no utiliza comillas para marcar las claves de cadena (lo que hace un poco menos para escribir). Sin embargo, tenga en cuenta que al igual que cualquier identificador de GDScript, las claves escritas en este formulario no pueden comenzar con un dígito.

var d = {
    test22 = "Value",
    somekey = 2,
    otherkey = [2,3,4],
    morekey = "Hello"
}

Para agregar una clave a un diccionario existente, acceda a ella como una clave existente y asígela:

var d = {} # create an empty Dictionary
d.Waiting = 14 # add String "Waiting" as a key and assign the value 14 to it
d[4] = "hello" # add integer `4` as a key and assign the String "hello" as its value
d["Godot"] = 3.01 # add String "Godot" as a key and assign the value 3.01 to it

